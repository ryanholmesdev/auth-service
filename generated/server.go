// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// GetAuthProviderCallbackParams defines parameters for GetAuthProviderCallback.
type GetAuthProviderCallbackParams struct {
	// State The state parameter containing redirect URI and anti-CSRF token.
	State string `form:"state" json:"state"`
}

// GetAuthProviderLoginParams defines parameters for GetAuthProviderLogin.
type GetAuthProviderLoginParams struct {
	// RedirectUri The URI to redirect the user to after authentication.
	RedirectUri string `form:"redirect_uri" json:"redirect_uri"`
}

// PostAuthProviderLogoutParams defines parameters for PostAuthProviderLogout.
type PostAuthProviderLogoutParams struct {
	// UserId The specific user ID to log out. If omitted, logs out all users under this provider.
	UserId *string `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// GetAuthProviderTokenParams defines parameters for GetAuthProviderToken.
type GetAuthProviderTokenParams struct {
	// UserId The unique identifier of the user for whom the token is being retrieved.
	UserId string `form:"user_id" json:"user_id"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of connected providers that the user is logged in with
	// (GET /auth/status)
	GetAuthStatus(w http.ResponseWriter, r *http.Request)
	// Handle OAuth callback and store tokens.
	// (GET /auth/{provider}/callback)
	GetAuthProviderCallback(w http.ResponseWriter, r *http.Request, provider string, params GetAuthProviderCallbackParams)
	// Redirect to the provider's OAuth login page.
	// (GET /auth/{provider}/login)
	GetAuthProviderLogin(w http.ResponseWriter, r *http.Request, provider string, params GetAuthProviderLoginParams)
	// Log out a user or all users from a provider.
	// (POST /auth/{provider}/logout)
	PostAuthProviderLogout(w http.ResponseWriter, r *http.Request, provider string, params PostAuthProviderLogoutParams)
	// Retrieve an OAuth token for a specific provider and user.
	// (GET /auth/{provider}/token)
	GetAuthProviderToken(w http.ResponseWriter, r *http.Request, provider string, params GetAuthProviderTokenParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Retrieve a list of connected providers that the user is logged in with
// (GET /auth/status)
func (_ Unimplemented) GetAuthStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Handle OAuth callback and store tokens.
// (GET /auth/{provider}/callback)
func (_ Unimplemented) GetAuthProviderCallback(w http.ResponseWriter, r *http.Request, provider string, params GetAuthProviderCallbackParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Redirect to the provider's OAuth login page.
// (GET /auth/{provider}/login)
func (_ Unimplemented) GetAuthProviderLogin(w http.ResponseWriter, r *http.Request, provider string, params GetAuthProviderLoginParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Log out a user or all users from a provider.
// (POST /auth/{provider}/logout)
func (_ Unimplemented) PostAuthProviderLogout(w http.ResponseWriter, r *http.Request, provider string, params PostAuthProviderLogoutParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve an OAuth token for a specific provider and user.
// (GET /auth/{provider}/token)
func (_ Unimplemented) GetAuthProviderToken(w http.ResponseWriter, r *http.Request, provider string, params GetAuthProviderTokenParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAuthStatus operation middleware
func (siw *ServerInterfaceWrapper) GetAuthStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAuthProviderCallback operation middleware
func (siw *ServerInterfaceWrapper) GetAuthProviderCallback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "provider" -------------
	var provider string

	err = runtime.BindStyledParameterWithLocation("simple", false, "provider", runtime.ParamLocationPath, chi.URLParam(r, "provider"), &provider)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provider", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthProviderCallbackParams

	// ------------- Required query parameter "state" -------------

	if paramValue := r.URL.Query().Get("state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthProviderCallback(w, r, provider, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAuthProviderLogin operation middleware
func (siw *ServerInterfaceWrapper) GetAuthProviderLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "provider" -------------
	var provider string

	err = runtime.BindStyledParameterWithLocation("simple", false, "provider", runtime.ParamLocationPath, chi.URLParam(r, "provider"), &provider)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provider", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthProviderLoginParams

	// ------------- Required query parameter "redirect_uri" -------------

	if paramValue := r.URL.Query().Get("redirect_uri"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "redirect_uri"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirect_uri", r.URL.Query(), &params.RedirectUri)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "redirect_uri", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthProviderLogin(w, r, provider, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAuthProviderLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAuthProviderLogout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "provider" -------------
	var provider string

	err = runtime.BindStyledParameterWithLocation("simple", false, "provider", runtime.ParamLocationPath, chi.URLParam(r, "provider"), &provider)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provider", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthProviderLogoutParams

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthProviderLogout(w, r, provider, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAuthProviderToken operation middleware
func (siw *ServerInterfaceWrapper) GetAuthProviderToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "provider" -------------
	var provider string

	err = runtime.BindStyledParameterWithLocation("simple", false, "provider", runtime.ParamLocationPath, chi.URLParam(r, "provider"), &provider)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provider", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthProviderTokenParams

	// ------------- Required query parameter "user_id" -------------

	if paramValue := r.URL.Query().Get("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "user_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthProviderToken(w, r, provider, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/status", wrapper.GetAuthStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{provider}/callback", wrapper.GetAuthProviderCallback)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{provider}/login", wrapper.GetAuthProviderLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/{provider}/logout", wrapper.PostAuthProviderLogout)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{provider}/token", wrapper.GetAuthProviderToken)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTW/jNhP+KwQv70Wxnc2+i4VPTTdo6yJtg3j3VAQBI42kSShSIUfedQP/92KoT1tK",
	"87Fo0FMcemb4DJ+ZZ8YPEk1q5fJBJuBjhyWhNXIpTy9WIrVOFMqoDE0m/jitKBdk78B4oUwiVEU5GMJY",
	"sctMRpKQNLAvW67BbTAGcXqxkpHcgPN14OPZYraQu0jaEowqUS7lSTiKZKko9wxlzrHnnhRV4f8MaIzw",
	"EqhyjEVo9CRsKkpnN5iA80JpazLxFSkX2mZoRB0r4K48OJEAKdSeUdsSXEhhlcil/BmI4a/ruyPpwJfW",
	"eAg43i0W/Ce2hsAESKosdfMC81vPuB4kfFNFqWuP3ypNWGoQFx22c5tlkIhVsN0oXYFc/vkgE/SlVttr",
	"owp+w19tbsSZBRlJKBRquZS3Njc/NMFnsS1kJHWIdY1GLslVEMn2CeRS+tISplsZSc74Gjk7/nT87kTu",
	"otGFp5rZWhdI+eBOxacvuJQwUXp05fv/f5C7q10kf7dPPQRbrdFkgyf7b7zY1W4XSR/nUCiGgQRFYLh0",
	"XECENd/7mLpa2IdH25JPPDk0GbdCg3doPgF95DbIZeBap9UY31irQRm27hMd3tPnPArfPcLQvn2Pkf2u",
	"O7E3txCT7A+Uc2ord2yy38LnTePG1hiICZK+hWfs/77ut32nH1UiHNxX4CkSBXrP6uTBs76I1VnjeDx2",
	"/GJYVqzDvyARKo7B8y3MalUUym1rTXEIGxiIygQ2QbkiQTnUWoJe1EwINEFzQtBawx5ap908VlrfqPhu",
	"IGiT0tOW/afWnoXRqQIInA+Fz4QHsZSRbIq/I5cV675CB0lbCX3Njhg7fKHPOQSlBNHdyPmTQsOP7CBB",
	"BzGJL5eregQYwqNP68uf6rnAahqw3Vfgtj24EPJFyK6mhXcf7boKHKaV1tvhNILkkNZflEk0NCOs5SFk",
	"4Mk6aKbabJq3MECeS9p5MH5bxpgNsj07XWGSFSplDsejeoqmNsB15fC72DpZvJsa13V0v4ePP9e0tO/R",
	"DOxSZTDuzjbD2rF1+Z9vYhy6TnFpq8Biaf3kTlHYDfCeMNx3wiKkhC8hxhTjGjwfaR0+e1EZRq46ROO9",
	"4sL6w0JhJG/c23sZrM74IbXNhK1oJlapsAUSQRLxoefTUYqUo9/LcqqQ2sHxig5/YrXq4+2P3QK8V9nB",
	"xN3Th0ahOdPnzK7xrHo02r86p6LOw1gSqa3MSNzOawKFmqjL1NlirywnuyIU+XMV7nMwftu6rQzeVyAw",
	"YRFLkbNMexnh7vya2yKc1A2LXtxAPbLqgZ48XavfPZ1eWbv1JnLdkdAXcGHju6P666Pw9dHx5Pb4rUQH",
	"/nAPPPmwWHTWaAgycGzuIHXg80cvbL5//MbndEv746zX915JqVeiwVbV/TZ7dUdx6TfC9tIlkI3fj41D",
	"rfed90z0j2yU/zhSJuNwIHCbtsUqx79pcqJyOZ9rGyudW0/Lj4uPC/558ncAAAD//5BbRbDKDwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
